@using Backend.Models
@using Backend.Models.DTOs
@using Microsoft.AspNetCore.Components
@using BlazorBootstrap
@using Frontend.Components.Pages
@using Humanizer
@inject HttpClient client
@* @if (Intervals != null) *@
@* { *@
<div>

    <div class="row">
        <div class="col-md-5 col-sm-12">
            @if (Intervals != null)
            {
            <AutoComplete
                TItem="Interval"
                @bind-Value="SelectedInterval"
                DataProvider="AutoCompleteDataProvider"
                PropertyName="IntervalName"
                Placeholder="Search an Interval..."
                OnChanged="((interval) => OnAutoCompleteChanged(interval))">
            </AutoComplete>
            }
        </div>
    </div>
    </div>


    <b>Filter Showing @Intervals.Count() Intervals</b>
@* } *@
@* { *@
@* <b>No Intervals Found</b> *@
@* } *@

@* @if (selectedInterval != null) *@
@* { *@
@*     <!-- Display selected interval information --> *@
@*     <p>Selected interval: @selectedInterval.IntervalName</p> *@
@* } *@

@code {

    [Parameter] public IEnumerable<Interval> Intervals { get; set; } = new List<Interval>();

    [Parameter] public EventCallback<String> OnIntervalChanged { get; set; }

    public string SelectedInterval = "";
    private bool isLoading = false;
    private IEnumerable<Interval> IntervalsData = new List<Interval>();


    public async Task<IQueryable<Interval>> FetchIntervals(HttpClient client)
    {

        Console.WriteLine("Fetching intervals from the server");
        var intervals = await client.GetFromJsonAsync<Interval[]>("https://localhost:8443/api/interval?skip=0&limit=250&sortBy=interval_no&sortDir=ASC");
        return intervals.AsQueryable();
    }

    public void onSelect(string intervalName)
    {
        SelectedInterval = intervalName;
        OnIntervalChanged.InvokeAsync(SelectedInterval);
    }


    protected override async Task OnInitializedAsync()
    {
        System.Console.WriteLine("Got " + Intervals.Count() + " intervals");
        Intervals.Select(i => i.IntervalName).ToList().ForEach(i => System.Console.WriteLine(i));
        //Intervals = await FetchIntervals(client);
        //isLoading = true;
        //[TODO] fix endpoints so they have the same pluralization and use the created httpClient registered in Program.cs
    }

    private Task OnAutoCompleteChanged(Interval interval)
    {
        string SelectedInterval = interval.IntervalName;

        OnIntervalChanged.InvokeAsync();

        return OnIntervalChanged.InvokeAsync(SelectedInterval);
    }

    private async Task<AutoCompleteDataProviderResult<Interval>> AutoCompleteDataProvider(AutoCompleteDataProviderRequest<Interval> request)
    {
        var filteredIntervals = Intervals
            .Where(i => i.IntervalName != null && i.IntervalName.Contains("carnian"))
            .ToList();

        return await Task.FromResult(new AutoCompleteDataProviderResult<Interval>
        {
            Data = Intervals,
            TotalCount = Intervals.Count()
        });
    }
}

